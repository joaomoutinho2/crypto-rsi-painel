import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import ccxt
import json
import os
from datetime import datetime
from ta.momentum import RSIIndicator
from ta.trend import SMAIndicator, EMAIndicator, MACD
from ta.volatility import BollingerBands
from config import MOEDAS, LOG_PATH
from io import BytesIO
from streamlit_autorefresh import st_autorefresh
from telegram_alert import enviar_telegram

# üìÅ Base de dados local
FICHEIRO_POSICOES = "posicoes.json"

def carregar_posicoes():
    if not os.path.exists(FICHEIRO_POSICOES):
        return []
    with open(FICHEIRO_POSICOES, "r") as f:
        return json.load(f)

def guardar_posicoes(posicoes):
    with open(FICHEIRO_POSICOES, "w") as f:
        json.dump(posicoes, f, indent=2)

# ‚öôÔ∏è Configura√ß√£o geral
st.set_page_config(page_title="Painel RSI", layout="wide")
st.title("üìà Painel RSI com Indicadores T√©cnicos Avan√ßados")

# Sidebar: filtros + navega√ß√£o
st.sidebar.header("‚öôÔ∏è Filtros")
tempo_refresco = st.sidebar.slider("‚è≥ Atualizar a cada (segundos)", 10, 300, 60, step=10)
timeframe = st.sidebar.selectbox("üïí Intervalo de tempo", ["15m", "1h", "4h"], index=1)
exchanges_disponiveis = ['kucoin', 'coinbase', 'kraken']
exchange_nome = st.sidebar.selectbox("üåê Exchange", exchanges_disponiveis, index=0)
filtro_alerta = st.sidebar.radio("‚ö†Ô∏è Tipo de alerta a mostrar", ["Todos", "ENTRADA", "SA√çDA", "NEUTRO"])

# üîΩ Menu de sec√ß√µes (AQUI ESTAVA A FALTAR!)
st.sidebar.markdown("---")
secao = st.sidebar.radio("üìÇ Sec√ß√µes", ["üìä Painel RSI", "üíº Minhas Posi√ß√µes"])

# üîÑ Atualiza√ß√£o autom√°tica
st_autorefresh(interval=tempo_refresco * 1000, key="refresh")

# ============================
# üìä PAINEL RSI
# ============================
if secao == "üìä Painel RSI":
    exchange = getattr(ccxt, exchange_nome)()
    estado_alertas = {}

    for moeda in MOEDAS:
        try:
            candles = exchange.fetch_ohlcv(moeda, timeframe=timeframe, limit=100)
            df = pd.DataFrame(candles, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

            df['RSI'] = RSIIndicator(close=df['close'], window=14).rsi()
            df['SMA'] = SMAIndicator(close=df['close'], window=14).sma_indicator()
            df['EMA'] = EMAIndicator(close=df['close'], window=14).ema_indicator()
            df['volume_medio'] = df['volume'].rolling(window=14).mean()

            macd = MACD(close=df['close'])
            df['MACD'] = macd.macd()
            df['MACD_signal'] = macd.macd_signal()

            bb = BollingerBands(close=df['close'], window=20, window_dev=2)
            df['BB_upper'] = bb.bollinger_hband()
            df['BB_lower'] = bb.bollinger_lband()

            rsi = df['RSI'].iloc[-1]
            preco = df['close'].iloc[-1]
            sma = df['SMA'].iloc[-1]
            ema = df['EMA'].iloc[-1]
            vol = df['volume'].iloc[-1]
            vol_med = df['volume_medio'].iloc[-1]
            macd_val = df['MACD'].iloc[-1]
            macd_sig = df['MACD_signal'].iloc[-1]
            bb_sup = df['BB_upper'].iloc[-1]
            bb_inf = df['BB_lower'].iloc[-1]

            st.subheader(f"üìä {moeda} ({exchange_nome})")
            col1, col2, col3 = st.columns(3)
            col1.metric("üí∞ Pre√ßo", f"{preco:.2f} USDT")
            col2.metric("üìà RSI", f"{rsi:.2f}")
            col3.metric("üìä SMA", f"{sma:.2f}")

            alerta = "NEUTRO"
            emoji = "‚ÑπÔ∏è"
            if rsi < 30:
                alerta = "ENTRADA"
                emoji = "üîî"
            elif rsi > 70:
                alerta = "SA√çDA"
                emoji = "üîî"

            st.markdown(f"**{emoji} Estado: {alerta}**")

            confirmacao = []
            if alerta == "ENTRADA":
                if preco > sma: confirmacao.append("‚úÖ pre√ßo > SMA")
                if preco > ema: confirmacao.append("‚úÖ pre√ßo > EMA")
                if vol > vol_med: confirmacao.append("‚úÖ volume alto")
                if macd_val > macd_sig: confirmacao.append("‚úÖ MACD p/ cima")
                if preco < bb_inf: confirmacao.append("‚úÖ fora da Bollinger inferior")
            elif alerta == "SA√çDA":
                if preco < sma: confirmacao.append("‚úÖ pre√ßo < SMA")
                if preco < ema: confirmacao.append("‚úÖ pre√ßo < EMA")
                if vol > vol_med: confirmacao.append("‚úÖ volume alto")
                if macd_val < macd_sig: confirmacao.append("‚úÖ MACD p/ baixo")
                if preco > bb_sup: confirmacao.append("‚úÖ fora da Bollinger superior")
            else:
                confirmacao.append("‚ÑπÔ∏è RSI neutro")

            st.markdown("üìã **An√°lise**: " + " | ".join(confirmacao))

            fig, ax = plt.subplots(figsize=(10, 4))
            ax.plot(df['close'], label='Pre√ßo', color='blue')
            ax.plot(df['SMA'], label='SMA', color='purple', linestyle='--')
            ax.plot(df['EMA'], label='EMA', color='green', linestyle='--')
            ax.plot(df['BB_upper'], label='BB Sup', color='grey', linestyle=':')
            ax.plot(df['BB_lower'], label='BB Inf', color='grey', linestyle=':')
            ax.set_title(f"{moeda} - Pre√ßo com SMA/EMA/Bollinger")
            ax.legend()
            st.pyplot(fig)

            buf = BytesIO()
            fig.savefig(buf, format="png")
            st.download_button(
                label="üíæ Guardar gr√°fico como imagem",
                data=buf.getvalue(),
                file_name=f"{moeda.replace('/', '_')}_grafico.png",
                mime="image/png"
            )

            st.divider()

        except Exception as e:
            st.error(f"Erro ao carregar {moeda}: {e}")

# ============================
# üíº REGISTO DE POSI√á√ïES
# ============================
elif secao == "üíº Minhas Posi√ß√µes":
    st.title("üíº Registo de Posi√ß√µes Pessoais")

    with st.form("form_nova_posicao"):
        moeda = st.text_input("Moeda (ex: SOL/USDT)")
        montante = st.number_input("Montante investido (‚Ç¨)", min_value=0.0)
        preco = st.number_input("Pre√ßo de entrada (USDT)", min_value=0.0)
        submeter = st.form_submit_button("Guardar")

        if submeter and moeda and montante and preco:
            nova = {
                "moeda": moeda.upper(),
                "montante": montante,
                "preco_entrada": preco,
                "data": datetime.now().strftime("%Y-%m-%d %H:%M")
            }
            posicoes = carregar_posicoes()
            posicoes.append(nova)
            guardar_posicoes(posicoes)
            st.success("‚úÖ Posi√ß√£o registada com sucesso!")

    st.subheader("üìã Posi√ß√µes Atuais")
    posicoes = carregar_posicoes()
    if posicoes:
        st.table(posicoes)
    else:
        st.info("Nenhuma posi√ß√£o registada.")
